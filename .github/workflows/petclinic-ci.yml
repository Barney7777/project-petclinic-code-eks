name: Petclinic CI

on:
  push:
    branches:
    - main
    - dev
    - devops-barney
    # pull_request:
    #   branches:
    #   - main
    #   - dev

jobs:
  build-test-vulnerabilities-scan:
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    strategy:
      matrix:
        java-version: [17]
        distribution: [temurin]
    steps:
    - name: Checkout Source Code
      uses: actions/checkout@v4

    - name: Set up JDK ${{ matrix.java-version }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ matrix.java-version }}
        distribution: ${{ matrix.distribution }}
        # cache: maven

    # - name: Cache Dependencies
    #   uses: actions/cache@v4
    #   with:
    #     path: ~/.m2
    #     key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
    #     restore-keys: |
    #       ${{ runner.os }}-maven-

    - name: Build with Maven
      run: mvn clean package -DskipTests -Dspring.profiles.active=mysql

    - name: Upload Build Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: target

    # - name: Run JUnit Tests
    #   run: mvn test -Dcheckstyle.skip -Dtest=!PostgresIntegrationTests
    # - name: Upload JUnit Test Report
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: junit-test-report
    #     path: target/surefire-reports/*.xml

    # - name: SAST SonarCloud Code Quality Check
    #   uses: sonarsource/sonarcloud-github-action@master
    #   env:
    #     GITHUB_TOKEN: ${{ secrets._GITHUB_TOKEN }}
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
    #   with:
    #     args: -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }} -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} -Dsonar.host.url=${{ secrets.SONAR_URL }} -Dsonar.login=${{ secrets.SONAR_TOKEN }} -Dsonar.sources=. -Dsonar.verbose=true -Dtest=!PostgresIntegrationTests -Dsonar.java.binaries=target/classes

    # - name: Setup JFrog CLI
    #   uses: jfrog/setup-jfrog-cli@v4
    #   with:
    #     version: latest
    # - name: Push artifacts to jfrog
    #   run: |
    #     jfrog rt upload --url  http://3.27.70.165:8082/artifactory --access-token ${{ secrets.JFROG_TOKEN }} target/*.jar petclinic

  docker-image-build-scan-push-update-manifests:
    needs: build-test-vulnerabilities-scan
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    permissions:
      id-token: write
      contents: read
    env:
      ECR_REPOSITORY_DEV: ${{ secrets.PETCLINIC_REPO_DEV }}
      ECR_REPOSITORY_PROD: ${{ secrets.PETCLINIC_REPO_PROD }}
      IMAGE_TAG: ${{ github.sha }}
      ECR_REGISTRY: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_DEFAULT_REGION }}.amazonaws.com
      APP_NAME: petclinic-app

    steps:
    - name: Checkout Source Code
      uses: actions/checkout@v4
    - name: Setup QEMU
      uses: docker/setup-qemu-action@v3
    - name: Setup Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Download Build Artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: target

    - name: Build Docker Image
      run: |
        echo "Building docker image"
        docker build -t $APP_NAME:latest .

    - name: Install Trivy
      run: |
        curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin
    - name: Trivy Image Scan
      run: |
        echo "Scanning Docker Image"
        trivy image --format table -o trivy-image-report.html $APP_NAME:latest

    - name: Archive Trivy Image Scan Results
      uses: actions/upload-artifact@v4
      with:
        name: trivy-image-report.html
        path: trivy-image-report.html

    - name: Configure AWS Credentials
      if: github.ref == 'refs/heads/dev' && github.event_name == 'push' || github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_ROLE_PETCLINIC_APP }}
        aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

    - name: Login to Amazon ECR Private Registry
      if: github.ref == 'refs/heads/dev' && github.event_name == 'push' || github.ref == 'refs/heads/main' && github.event_name == 'push'
      uses: aws-actions/amazon-ecr-login@v2

    - name: Push Docker Image to DEV ECR
      if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
      run: |
        echo "Tagging Docker Image For Dev"
        docker tag $APP_NAME:latest $ECR_REGISTRY/$ECR_REPOSITORY_DEV:latest
        docker tag $APP_NAME:latest $ECR_REGISTRY/$ECR_REPOSITORY_DEV:$IMAGE_TAG
        echo "Pushing Docker Image"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_DEV:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_DEV:$IMAGE_TAG

    - name: Tag and Push Docker Image to Prod ECR
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: |
        echo "Tagging Docker image for Prod"
        docker tag $APP_NAME:latest $ECR_REGISTRY/$ECR_REPOSITORY_PROD:latest
        docker tag $APP_NAME:latest $ECR_REGISTRY/$ECR_REPOSITORY_PROD:$IMAGE_TAG
        echo "Pushing Docker image to Prod ECR"
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_PROD:latest
        docker push $ECR_REGISTRY/$ECR_REPOSITORY_PROD:$IMAGE_TAG
    
    - name: Checkout Code from Gitops Repo
      if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
      uses: actions/checkout@v4
      with:
        repository: Barney7777/petclinic-gitops
        ref: dev
        # token: ${{ secrets._GITHUB_TOKEN }}
        path: petclinic-gitops

    - name: Update Image in Gitops Repo
      if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
      run: |
        echo "Updating Image in Gitops Repo"
        cd petclinic-gitops/petclinic/app
        echo "Before Update"
        cat deployment.yml
        sed -i "s|image:.*|image: $ECR_REGISTRY/$ECR_REPOSITORY_DEV:$IMAGE_TAG|" deployment.yml
        echo "After Update"
        cat deployment.yml
        git config --global user.name "Barney"
        git config --global user.email "example@gmail.com"
        git add deployment.yml
        git commit -m "Update Image to $IMAGE_TAG"
        git push origin dev


